GIT COMMANDS

Step 1 : Check if git is already installed.   terminal - git --version Step 2 : Download and install git   https://git-scm.com/download/mac Step 3 : Signup and create a account on GitHub   https://github.com/ Step 4 : Add your github email and username to git   git config --global user.email "yourGitHub@email.com"   git config --global user.name "yourGitHubusername" Step 5 : Add file/folders to git - tracking Step 6 : Commands    - terminal - goto the location of the folder/project           - git init    - git status    - git add    - git commit -m “…..”    - git remote add origin “location of remote repo”    - git push -u origin master    - git log    - git --help     - git pull  -git fetch 


Branching and Merging 
Step 1 : Create branch    git branch “branch name” Step 2 : Checkout branch    git checkout “branch name” Step 3 : Merge new branch in master branch    git merge “branch name” Step 4 : Delete branch    git branch -d “branch name”    — delete from local    git push origin —delete “branch name”   — delete from remote


DOCKER COMMANDS

: IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST Experiment No: 8 AIM: To understand Docker Architecture and Container Life Cycle, install Docker and execute docker commands to manage images and interact with containers. THEORY: Docker Engine is an open source containerization technology for building and containerizing your applications. Docker Engine acts as a client-server application with: • A server with a long-running daemon process dockerd. • APIs which specify interfaces that programs can use to talk to and instruct the Docker daemon. • A command line interface (CLI) client docker. The CLI uses Docker APIs to control or interact with the Docker daemon through scripting or direct CLI commands. Many other Docker applications use the underlying API and CLI. The daemon creates and manage Docker objects, such as images, containers, networks, and volumes.. //Add the description of Docker Architecture & Docker Container Lifecycle Management here. Installation of Docker: To get started with Docker Engine on Ubuntu, make sure you meet the prerequisites, and then install Docker. Prerequisites: OS requirements To install Docker Engine, you need the 64-bit version of one of these Ubuntu versions: • Ubuntu Hirsute 21.04 • Ubuntu Focal 20.04 (LTS) • Ubuntu Bionic 18.04 (LTS) Installation methods: You can install Docker Engine in different ways, depending on your needs: 1. Most users set up Docker’s repositories and install from them 2. Some users download the DEB package and install it manually and manage upgrades completely manually. 3. In testing and development environments, some users choose to use automated convenience scripts to install Docker Install using the convenience script: Docker provides a convenience script at get.docker.com to install Docker into development environments quickly and non-interactively. This example downloads the script from get.docker.com and runs it to install the latest stable release of Docker on Linux: $ curl -fsSL https://get.docker.com -o get-docker.sh $ sudo sh get-docker.sh To get OS detail and version it77@it77-OptiPlex-3050 :~$ lsb_release -a IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST Uninstall old versions it77@it77-OptiPlex-3050 :~$ sudo su t77@it77-OptiPlex-305i0 :~$ sudo apt-get remove docker docker-engine docker.io containerd runc it77@it77-OptiPlex-3050 :~$ sudo apt install curl root@it77-OptiPlex-3050:/home/it77# curl -fsSL https://get.docker.com -o get-docker.sh Examine scripts downloaded from the internet root@it77-OptiPlex-3050:/home/it77# ls root@it77-OptiPlex-3050:/home/it77# sudo sh get-docker.sh Basic Docker Commands: Check the version of Docker installed root@it77-OptiPlex-3050:/home/it77# docker --version Running existing Docker images: Go to Docker public repository at https://hub.docker.com to get the official images available for testing purpose Run docker image root@it77-OptiPlex-3050:/home/it77# docker run docker/whalesay cowsay hello_you root@it77-OptiPlex-3050:/home/it77# docker run docker/whalesay cowsay hello_me Check all pulled images root@it77-OptiPlex-3050:/home/it77# docker images Pull the sample images root@it77-OptiPlex-3050:/home/it77# sudo docker pull postgres root@it77-OptiPlex-3050:/home/it77# docker images Check all running container root@it77-OptiPlex-3050:/home/it77# docker ps // note the container id root@it77-OptiPlex-3050:/home/it77# docker ps -a //previously ran containers Pull the docker image of Ubuntu root@it77-OptiPlex-3050:/home/it77# docker pull ubuntu:latest IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST root@it77-OptiPlex-3050:/home/it77# docker images Run the command in a container: Getting a bash in Ubuntu root@it77-OptiPlex-3050:/home/it77# docker run -it ubuntu:latest bash root@it77-OptiPlex-3050:/home/it77# docker ps Note the <12 digit hash value> is the id of the shell. Here it is 67e9bd16d77b Create an Apache Server and host index.html in the Containers root@67e9bd16d77b:/# apt update root@67e9bd16d77b:/# apt install apache2 root@67e9bd16d77b:/# cd /var/www/html root@67e9bd16d77b:/var/www/html# mv index.html index.backup root@67e9bd16d77b:/var/www/html# ls root@67e9bd16d77b:/var/www/html# apt install nano root@67e9bd16d77b:/var/www/html# nano index.html root@67e9bd16d77b:/var/www/html# cat index.html Our home Page IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST root@67e9bd16d77b:/var/www/html# service apache2 restart root@67e9bd16d77b:/var/www/html# service apache2 status * apache2 is running Tagging an image before committing: root@it77-OptiPlex-3050:/home/it77# docker tag 67e9bd16d77b bushsk/ubuntu_1:v1 Commit an image by opening a new tab in the terminal : root@it77-OptiPlex-3050:/home/it77# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 67e9bd16d77b ubuntu:latest "bash" 48 seconds ago Up 46 seconds serene_kepler root@it77-OptiPlex-3050:/home/it77# docker commit 67e9bd16d77b bushsk/ubuntu_1:v1 // bushsk/ubuntu_1 is the name of image and v1 is the tag sha256:845c3411773d4197475cd41f6232dace9dce22490b8744714f36b25c4cfb428a IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST Check the size and image and image id of the committed image root@it77-OptiPlex-3050:/home/it77# docker images REPOSITORY TAG IMAGE ID CREATED SIZE bushsk/ubuntu_1 latest 845c3411773d 17 seconds ago 189MB postgres latest 4a82a16ee75c 13 days ago 394MB ubuntu latest 775349758637 6 weeks ago 64.2MB root@67e9bd16d77b:/var/www/html# exit Link the port of container with the port of host machine root@it77-OptiPlex-3050:/home/it77# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 948fbca4fa7d bushsk/ubuntu_1 "bash" 42 seconds ago Up 40 seconds 0.0.0.0:8888->80/tcp cid1 root@it77-OptiPlex-3050:/home/it77# docker run -itd -p 8888:80 --name cid1 bushsk/ubuntu_1 root@it77-OptiPlex-3050:/home/it77# ufw allow 8888 IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST Start Apache in the container root@it77-OptiPlex-3050:/home/it77# docker exec -it 948fbca4fa7d service apache2 restart root@it77-OptiPlex-3050:/home/it77# ifconfig //Get the IP address of your system, open a browser and put IP: port number (as 8888) You can also try doing on : https://kodekloud.com/topic/labs-basic-docker-commands-beta-3/ IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST Login in hub root@it77-OptiPlex-3050:/home/it77# docker login Pushing the image on Docker Hub root@it77-OptiPlex-3050:/home/it77# docker exec -it 948fbca4fa7d bash root@948fbca4fa7d:/# cd var/www/html root@948fbca4fa7d:/var/www/html# ls root@948fbca4fa7d:/var/www/html# nano index.html root@it77-OptiPlex-3050:/home/it77# docker push bushsk/ubuntu_1 The push refers to repository [docker.io/bushsk/ubuntu_1] 35279adae3eb: Pushed e0b3afb09dc3: Mounted from library/ubuntu 6c01b5a53aac: Mounted from library/ubuntu 2c6ac8e5063e: Mounted from library/ubuntu cc967c529ced: Mounted from library/ubuntu latest: digest: sha256:face8912d563874290e4419c61cb2711931f44a5990009c07bba4df91ced05aa size: 1364 IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST Stopping and removing containers using container id root@it77-OptiPlex-3050:/home/it77# docker stop bd9fdf66daaf root@it77-OptiPlex-3050:/home/it77# docker kill bd9fdf66daaf -- > not advisable root@it77-OptiPlex-3050:/home/it77# docker rm bd9fdf66daaf root@it77-OptiPlex-3050:/home/it77# docker ps -a Remove multiple containers using container ids: root@it77-OptiPlex-3050:/home/it77# docker rm bd9 abc root@it77-OptiPlex-3050:/home/it77# docker rm $(docker ps –aq) root@it77-OptiPlex-3050:/home/it77# docker ps -a Deleting the images root@it77-OptiPlex-3050:/home/it77# docker images root@it77-OptiPlex-3050:/home/it77# docker rmi 5c6 Creating an image using docker file script: DOCKER FILE root@it77-OptiPlex-3050:/home/it77# mkdir dockertutorial root@it77-OptiPlex-3050:/home/it77# cd dockertutorial root@it77-OptiPlex-3050:/home/it77/dockertutorial# pwd IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST /home/it77/dockertutorial root@it77-OptiPlex-3050:/home/it77/dockertutorial# nano index.html root@it77-OptiPlex-3050:/home/it77/dockertutorial# ls index.html Conclusion: Add conclusion here IT DEPARTMENT SIES GST DevOps LAB Department of IT, SIES GST Experiment No: 9 AIM: To learn Dockerfile instructions, build an image for a sample web application using Dockerfile. THEORY: Docker also gives you the capability to create your own Docker images, and it can be done with the help of Docker Files. A Docker File is a simple text file with instructions on how to build your images. FROM keyword tells Docker, from which base image you want to base your image from. In our example, we are creating an image from the Ubuntu image. The next command is the person who is going to maintain this image. Here you specify the MAINTAINER keyword and just mention the email ID. The RUN command is used to run instructions against the image. In our case, we first update our Ubuntu system and then install the nginx server on our Ubuntu image. The last CMD command is used to display a message to the user. Create a file with a name as Dockerfile: root@it77-OptiPlex-3050:/home/it77/dockertutorial# nano Dockerfile FROM ubuntu:latest # Adding a layer of Ubuntu as a base image MAINTAINER "BUSHRA" # Adding an author RUN apt update –y # Adding a layer of ‘apt-update’ in our image RUN apt install nginx –y # Adding a layer of ‘nginx’ webserver in our image EXPOSE 80 # Exposing port 80 of web server COPY index.html /var/www/html/index.html # Hosting our web page / application CMD ["nginx", "-g", "daemon off;"] # Starting nginx webserver in foreground root@it77-OptiPlex-3050:/home/it77/dockertutorial# docker build -t siesnginxservers . root@it77-OptiPlex-3050:/home/it77/dockertutorial# docker run -itd -p 8989:80 siesnginxservers root@it77-OptiPlex-3050:/home/it77/dockertutorial# ufw allow 8989 Open browser and put IP/localhost with port number as 8989 and run your web application. Conclusion: Add conclusion here